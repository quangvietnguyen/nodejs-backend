{"version":3,"sources":["shared/components/FormElements/ImageUpload.js","places/pages/NewPlace.js"],"names":["ImageUpload","props","useState","file","setFile","previewUrl","setPreviewUrl","isValid","setIsValid","filePickerRef","useRef","useEffect","fileReader","FileReader","onload","result","readAsDataURL","className","id","style","display","type","accept","ref","onChange","event","pickedFile","fileIsValid","target","files","length","onInput","center","src","alt","onClick","current","click","errorText","NewPlace","useHttpClient","isLoading","error","sendRequest","clearError","auth","useContext","AuthContext","history","useHistory","useForm","title","value","description","address","image","formState","inputHandler","placeSubmitHandler","a","preventDefault","formData","FormData","append","inputs","process","Authorization","token","push","Fragment","onClear","onSubmit","asOverlay","element","label","validators","VALIDATOR_REQUIRE","VALIDATOR_MINLENGTH","disabled"],"mappings":"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","file":"static/js/8.71017292.chunk.js","sourcesContent":["import \"./ImageUpload.css\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport Button from \"./Button\";\n\nconst ImageUpload = (props) => {\n  const [file, setFile] = useState();\n  const [previewUrl, setPreviewUrl] = useState();\n  const [isValid, setIsValid] = useState(false);\n  const filePickerRef = useRef();\n  useEffect(() => {\n    if (!file) {\n      return;\n    }\n    const fileReader = new FileReader();\n    fileReader.onload = () => {\n      setPreviewUrl(fileReader.result);\n    };\n    fileReader.readAsDataURL(file);\n  }, [file]);\n\n  const pickedHandler = (event) => {\n    let pickedFile;\n    let fileIsValid = isValid;\n    if (event.target.files || event.target.files.length === 1) {\n      pickedFile = event.target.files[0];\n      setFile(pickedFile);\n      setIsValid(true);\n      fileIsValid = true;\n    } else {\n      setIsValid(false);\n      fileIsValid = false;\n    }\n    props.onInput(props.id, pickedFile, fileIsValid);\n  };\n  const pickImageHandler = () => {\n    filePickerRef.current.click();\n  };\n  return (\n    <div className=\"form-control\">\n      <input\n        id={props.id}\n        style={{ display: \"none\" }}\n        type=\"file\"\n        accept=\".jpg,.png,.jpeg\"\n        ref={filePickerRef}\n        onChange={pickedHandler}\n      />\n      <div className={`image-upload ${props.center && \"center\"}`}>\n        <div className=\"image-upload__preview\">\n          {previewUrl ? (\n            <img src={previewUrl} alt=\"preview\" />\n          ) : (\n            <p>Please pick an image</p>\n          )}\n        </div>\n        <Button type=\"button\" onClick={pickImageHandler}>\n          UPLOAD\n        </Button>\n      </div>\n      {!isValid && <p>{props.errorText}</p>}\n    </div>\n  );\n};\n\nexport default ImageUpload;\n","import React, { useContext } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport Input from \"../../shared/components/FormElements/Input\";\nimport \"./NewPlace.css\";\nimport {\n  VALIDATOR_MINLENGTH,\n  VALIDATOR_REQUIRE,\n} from \"../../shared/util/validators\";\nimport { useForm } from \"../../shared/hooks/form-hook\";\nimport Button from \"../../shared/components/FormElements/Button\";\nimport { useHttpClient } from \"../../shared/hooks/http-hook\";\nimport { AuthContext } from \"../../shared/context/auth-context\";\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\nimport ImageUpload from \"../../shared/components/FormElements/ImageUpload\";\n\n// const formReducer = (state, action) => {\n//   switch (action.type) {\n//     case \"INPUT_CHANGE\":\n//       let formIsValid = true;\n//       for (const inputId in state.inputs) {\n//         if (inputId === action.inputId) {\n//           formIsValid = formIsValid && action.isValid;\n//         } else {\n//           formIsValid = formIsValid && state.inputs[inputId].isValid;\n//         }\n//       }\n//       return {\n//         ...state,\n//         inputs: {\n//           ...state.inputs,\n//           [action.inputId]: { value: action.value, isValid: action.isValid }, //[action.inputId will receive 2 value: title or description]\n//         },\n//         isValid: formIsValid,\n//       };\n//     default:\n//       return state;\n//   }\n// };\n\nconst NewPlace = () => {\n  // const [formState, dispatch] = useReducer(formReducer, {\n  //   inputs: {\n  //     title: {\n  //       value: \"\",\n  //       isValid: false,\n  //     },\n  //     description: {\n  //       value: \"\",\n  //       isValid: false,\n  //     },\n  //     address: {\n  //       value: \"\",\n  //       isValid: false,\n  //     },\n  //   },\n  //   isValid: false,\n  // });\n\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\n  const auth = useContext(AuthContext);\n  const history = useHistory();\n  const [formState, inputHandler] = useForm(\n    {\n      title: {\n        value: \"\",\n        isValid: false,\n      },\n      description: {\n        value: \"\",\n        isValid: false,\n      },\n      address: {\n        value: \"\",\n        isValid: false,\n      },\n      image: {\n        value: null,\n        isValid: false,\n      },\n    },\n    false\n  );\n  // const inputHandler = useCallback((id, value, isValid) => {\n  //   dispatch({\n  //     type: \"INPUT_CHANGE\",\n  //     value: value,\n  //     isValid: isValid,\n  //     inputId: id,\n  //   });\n  // }, []);\n\n  const placeSubmitHandler = async (event) => {\n    event.preventDefault();\n    try {\n      const formData = new FormData();\n      formData.append(\"title\", formState.inputs.title.value);\n      formData.append(\"description\", formState.inputs.description.value);\n      formData.append(\"address\", formState.inputs.address.value);\n      // formData.append(\"creator\", auth.userId);\n      formData.append(\"image\", formState.inputs.image.value);\n      await sendRequest(process.env.REACT_APP_BACKEND_URL + \"/places\", \"POST\", formData, {\n        Authorization: \"Bearer \" + auth.token\n      });\n      history.push(\"/\");\n    } catch (e) {}\n  };\n\n  return (\n    <React.Fragment>\n      <ErrorModal error={error} onClear={clearError} />\n      <form className=\"place-form\" onSubmit={placeSubmitHandler}>\n        {isLoading && <LoadingSpinner asOverlay />}\n        <Input\n          id=\"title\"\n          element=\"input\"\n          type=\"text\"\n          label=\"Title\"\n          validators={[VALIDATOR_REQUIRE()]}\n          errorText=\"Please enter a valid title\"\n          onInput={inputHandler}\n        />\n        <Input\n          id=\"description\"\n          element=\"textarea\"\n          label=\"Description\"\n          validators={[VALIDATOR_MINLENGTH(5)]}\n          errorText=\"Please enter a valid description, and at least 5 characters\"\n          onInput={inputHandler}\n        />\n        <Input\n          id=\"address\"\n          element=\"input\"\n          label=\"Address\"\n          validators={[VALIDATOR_REQUIRE()]}\n          errorText=\"Please enter a valid address\"\n          onInput={inputHandler}\n        />\n        <ImageUpload\n          center\n          id=\"image\"\n          onInput={inputHandler}\n          errorText=\"Please provide an image\"\n        />\n        <Button type=\"submit\" disabled={!formState.isValid}>\n          ADD PLACE\n        </Button>\n      </form>\n    </React.Fragment>\n  );\n};\n\nexport default NewPlace;\n"],"sourceRoot":""}