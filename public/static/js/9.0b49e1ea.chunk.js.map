{"version":3,"sources":["places/pages/UpdatePlace.js","shared/components/UIElements/Card.js"],"names":["UpdatePlace","history","useHistory","auth","useContext","AuthContext","useHttpClient","isLoading","error","sendRequest","clearError","useState","loadedPlace","setLoadedPlace","placeId","useParams","useForm","title","value","isValid","description","formState","inputHandler","setFormData","useEffect","a","process","responseData","place","fetchPlace","placeUpdateSubmitHandler","event","preventDefault","JSON","stringify","inputs","Authorization","token","push","userId","className","Fragment","onClear","onSubmit","id","element","type","label","validators","VALIDATOR_REQUIRE","errorText","onInput","valid","VALIDATOR_MINLENGTH","disabled","Card","props","style","children"],"mappings":"uPAmKeA,UAtHK,WAClB,IAAMC,EAAUC,cACVC,EAAOC,qBAAWC,KACxB,EAAsDC,cAA9CC,EAAR,EAAQA,UAAWC,EAAnB,EAAmBA,MAAOC,EAA1B,EAA0BA,YAAaC,EAAvC,EAAuCA,WACvC,EAAsCC,qBAAtC,mBAAOC,EAAP,KAAoBC,EAApB,KACMC,EAAUC,cAAYD,QAE5B,EAA+CE,YAC7C,CACEC,MAAO,CACLC,MAAO,GACPC,SAAS,GAEXC,YAAa,CACXF,MAAO,GACPC,SAAS,KAGb,GAXF,mBAAOE,EAAP,KAAkBC,EAAlB,KAAgCC,EAAhC,KAcAC,qBAAU,YACQ,uCAAG,4BAAAC,EAAA,+EAEYhB,EAAY,GAAD,OACjCiB,8CADiC,mBACWZ,IAHlC,OAETa,EAFS,OAKfJ,EACE,CACEN,MAAO,CACLC,MAAOS,EAAaV,MACpBE,SAAS,GAEXC,YAAa,CACXF,MAAOS,EAAaP,YACpBD,SAAS,KAGb,GAEFN,EAAec,EAAaC,OAlBb,yGAAH,qDAqBhBC,CAAW,KACV,CAACpB,EAAaK,EAASS,IAE1B,IAAMO,EAAwB,uCAAG,WAAOC,GAAP,SAAAN,EAAA,6DAC/BM,EAAMC,iBADyB,kBAGvBvB,EAAY,GAAD,OACZiB,8CADY,mBACgCZ,GAC/C,QACAmB,KAAKC,UAAU,CACbjB,MAAOI,EAAUc,OAAOlB,MAAMC,MAC9BE,YAAaC,EAAUc,OAAOf,YAAYF,QAE5C,CACE,eAAgB,mBAChBkB,cAAe,UAAYjC,EAAKkC,QAZP,OAe7BpC,EAAQqC,KAAK,IAAMnC,EAAKoC,OAAS,WAfJ,uGAAH,sDAmB9B,OAAIhC,EAEA,yBAAKiC,UAAU,UACb,kBAAC,IAAD,OAKD5B,GAAgBJ,EAUnB,kBAAC,IAAMiC,SAAP,KACE,kBAAC,IAAD,CAAYjC,MAAOA,EAAOkC,QAAShC,KACjCH,GAAaK,GACb,0BAAM4B,UAAU,aAAaG,SAAUb,GACrC,kBAAC,IAAD,CACEc,GAAG,QACHC,QAAQ,QACRC,KAAK,OACLC,MAAM,QACNC,WAAY,CAACC,eACbC,UAAU,8BACVC,QAAS7B,EACTJ,MAAON,EAAYK,MACnBmC,OAAO,IAET,kBAAC,IAAD,CACER,GAAG,cACHC,QAAQ,WACRC,KAAK,cACLC,MAAM,QACNC,WAAY,CAACK,YAAoB,IACjCH,UAAU,uDACVC,QAAS7B,EACTJ,MAAON,EAAYQ,YACnBgC,OAAO,IAET,kBAAC,IAAD,CAAQN,KAAK,SAASQ,UAAWjC,EAAUF,SAA3C,kBAlCJ,yBAAKqB,UAAU,UACb,kBAAC,IAAD,KACE,yD,gCC1HV,0BAYee,IARF,SAAAC,GACX,OACE,yBAAKhB,UAAS,eAAUgB,EAAMhB,WAAaiB,MAAOD,EAAMC,OACrDD,EAAME,Y","file":"static/js/9.0b49e1ea.chunk.js","sourcesContent":["import React, { useContext, useEffect, useState } from \"react\";\nimport { useParams, useHistory } from \"react-router-dom\";\nimport Input from \"../../shared/components/FormElements/Input\";\nimport Button from \"../../shared/components/FormElements/Button\";\nimport {\n  VALIDATOR_MINLENGTH,\n  VALIDATOR_REQUIRE,\n} from \"../../shared/util/validators\";\nimport \"./UpdatePlace.css\";\nimport { useForm } from \"../../shared/hooks/form-hook\";\nimport Card from \"../../shared/components/UIElements/Card\";\nimport { useHttpClient } from \"../../shared/hooks/http-hook\";\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\nimport { AuthContext } from \"../../shared/context/auth-context\";\n\n// const DUMMY_Places = [\n//   {\n//     id: \"p1\",\n//     title: \"CN Tower\",\n//     description: \"Highest site in Canada\",\n//     imageUrl:\n//       \"https://upload.wikimedia.org/wikipedia/commons/9/96/Toronto_-_ON_-_Toronto_Harbourfront7.jpg\",\n//     address: \"290 Bremner Blvd, Toronto, ON M5V 3L9\",\n//     location: {\n//       lng: -79.3852341,\n//       lat: 43.6430207,\n//     },\n//     creator: \"u1\",\n//   },\n//   {\n//     id: \"p2\",\n//     title: \"CNN Tower\",\n//     description: \"Highest site in Canada\",\n//     imageUrl:\n//       \"https://upload.wikimedia.org/wikipedia/commons/9/96/Toronto_-_ON_-_Toronto_Harbourfront7.jpg\",\n//     address: \"290 Bremner Blvd, Toronto, ON M5V 3L9\",\n//     location: {\n//       lng: -79.3852341,\n//       lat: 43.6430207,\n//     },\n//     creator: \"u2\",\n//   },\n// ];\n\nconst UpdatePlace = () => {\n  const history = useHistory();\n  const auth = useContext(AuthContext);\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\n  const [loadedPlace, setLoadedPlace] = useState();\n  const placeId = useParams().placeId;\n\n  const [formState, inputHandler, setFormData] = useForm(\n    {\n      title: {\n        value: \"\",\n        isValid: false,\n      },\n      description: {\n        value: \"\",\n        isValid: false,\n      },\n    },\n    false\n  );\n\n  useEffect(() => {\n    const fetchPlace = async () => {\n      try {\n        const responseData = await sendRequest(\n          `${process.env.REACT_APP_BACKEND_URL}/places/${placeId}`\n        );\n        setFormData(\n          {\n            title: {\n              value: responseData.title,\n              isValid: true,\n            },\n            description: {\n              value: responseData.description,\n              isValid: true,\n            },\n          },\n          true\n        );\n        setLoadedPlace(responseData.place);\n      } catch (e) {}\n    };\n    fetchPlace(0);\n  }, [sendRequest, placeId, setFormData]);\n\n  const placeUpdateSubmitHandler = async (event) => {\n    event.preventDefault();\n    try {\n      await sendRequest(\n        `${process.env.REACT_APP_BACKEND_URL}/places/${placeId}`,\n        \"PATCH\",\n        JSON.stringify({\n          title: formState.inputs.title.value,\n          description: formState.inputs.description.value,\n        }),\n        {\n          \"Content-Type\": \"application/json\",\n          Authorization: \"Bearer \" + auth.token,\n        }\n      );\n      history.push(\"/\" + auth.userId + \"/places\");\n    } catch (e) {}\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"center\">\n        <LoadingSpinner />\n      </div>\n    );\n  }\n\n  if (!loadedPlace && !error) {\n    return (\n      <div className=\"center\">\n        <Card>\n          <h2>Could not find place!</h2>\n        </Card>\n      </div>\n    );\n  }\n  return (\n    <React.Fragment>\n      <ErrorModal error={error} onClear={clearError} />\n      {!isLoading && loadedPlace && (\n        <form className=\"place-form\" onSubmit={placeUpdateSubmitHandler}>\n          <Input\n            id=\"title\"\n            element=\"input\"\n            type=\"text\"\n            label=\"Title\"\n            validators={[VALIDATOR_REQUIRE()]}\n            errorText=\"Please enter a valid title.\"\n            onInput={inputHandler}\n            value={loadedPlace.title}\n            valid={true}\n          />\n          <Input\n            id=\"description\"\n            element=\"textarea\"\n            type=\"Description\"\n            label=\"Title\"\n            validators={[VALIDATOR_MINLENGTH(5)]}\n            errorText=\"Please enter a valid description (min 5 characters).\"\n            onInput={inputHandler}\n            value={loadedPlace.description}\n            valid={true}\n          />\n          <Button type=\"submit\" disabled={!formState.isValid}>\n            UPDATE PLACE\n          </Button>\n        </form>\n      )}\n    </React.Fragment>\n  );\n};\n\nexport default UpdatePlace;\n","import React from 'react';\n\nimport './Card.css';\n\nconst Card = props => {\n  return (\n    <div className={`card ${props.className}`} style={props.style}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Card;\n"],"sourceRoot":""}