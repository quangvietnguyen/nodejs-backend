{"version":3,"sources":["users/pages/Auth.js","shared/components/UIElements/Card.js","shared/components/FormElements/ImageUpload.js"],"names":["Auth","auth","useContext","AuthContext","useState","isLoginMode","setIsLoginMode","useHttpClient","isLoading","error","sendRequest","clearError","useForm","email","value","isValid","password","formState","inputHandler","setFormData","authSubmitHandler","event","a","preventDefault","console","log","inputs","process","JSON","stringify","responseData","login","userId","token","formData","FormData","append","name","image","Fragment","onClear","className","asOverlay","onSubmit","element","id","type","label","validators","VALIDATOR_REQUIRE","errorText","onInput","center","VALIDATOR_EMAIL","valid","VALIDATOR_MINLENGTH","disabled","inverse","onClick","undefined","prevMode","Card","props","style","children","ImageUpload","file","setFile","previewUrl","setPreviewUrl","setIsValid","filePickerRef","useRef","useEffect","fileReader","FileReader","onload","result","readAsDataURL","display","accept","ref","onChange","pickedFile","fileIsValid","target","files","length","src","alt","current","click"],"mappings":"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","file":"static/js/7.d8427fc4.chunk.js","sourcesContent":["import React, { useState, useContext } from \"react\";\nimport {\n  VALIDATOR_EMAIL,\n  VALIDATOR_MINLENGTH,\n  VALIDATOR_REQUIRE,\n} from \"../../shared/util/validators\";\nimport { useForm } from \"../../shared/hooks/form-hook\";\nimport Input from \"../../shared/components/FormElements/Input\";\nimport Button from \"../../shared/components/FormElements/Button\";\nimport \"./Auth.css\";\nimport Card from \"../../shared/components/UIElements/Card\";\nimport { AuthContext } from \"../../shared/context/auth-context\";\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\nimport { useHttpClient } from \"../../shared/hooks/http-hook\";\nimport ImageUpload from \"../../shared/components/FormElements/ImageUpload\";\n\nconst Auth = () => {\n  const auth = useContext(AuthContext);\n  const [isLoginMode, setIsLoginMode] = useState(true);\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\n  const [formState, inputHandler, setFormData] = useForm(\n    {\n      email: {\n        value: \"\",\n        isValid: false,\n      },\n      password: {\n        value: \"\",\n        isValid: false,\n      },\n    },\n    false\n  );\n\n  const authSubmitHandler = async (event) => {\n    event.preventDefault();\n\n    console.log(formState.inputs);\n\n    if (isLoginMode) {\n      try {\n        const responseData = await sendRequest(\n          process.env.REACT_APP_BACKEND_URL + \"/users/login\",\n          \"POST\",\n          JSON.stringify({\n            email: formState.inputs.email.value,\n            password: formState.inputs.password.value,\n          }),\n          {\n            \"Content-Type\": \"application/json\",\n          }\n        );\n        auth.login(responseData.userId, responseData.token);\n      } catch (e) {}\n    } else {\n      try {\n        const formData = new FormData();\n        formData.append(\"email\", formState.inputs.email.value);\n        formData.append(\"name\", formState.inputs.name.value);\n        formData.append(\"password\", formState.inputs.password.value);\n        formData.append(\"image\", formState.inputs.image.value);\n        const responseData = await sendRequest(\n          process.env.REACT_APP_BACKEND_URL + \"/users/signup\",\n          \"POST\",\n          formData\n        );\n        auth.login(responseData.userId, responseData.token);\n      } catch (e) {}\n    }\n  };\n\n  const switchModeHandler = () => {\n    if (!isLoginMode) {\n      setFormData(\n        {\n          ...formState.inputs,\n          name: undefined,\n          image: undefined,\n        },\n        formState.inputs.email.isValid && formState.inputs.password.isValid\n      );\n    } else {\n      setFormData(\n        {\n          ...formState.inputs,\n          name: {\n            value: \"\",\n            isValid: false,\n          },\n          image: {\n            value: null,\n            isValid: false,\n          },\n        },\n        false\n      );\n    }\n    setIsLoginMode((prevMode) => !prevMode);\n  };\n\n  return (\n    <React.Fragment>\n      <ErrorModal error={error} onClear={clearError} />\n      <Card className=\"authentication\">\n        {isLoading && <LoadingSpinner asOverlay />}\n        <h2>Login Required</h2>\n        <hr />\n        <form onSubmit={authSubmitHandler}>\n          {!isLoginMode && (\n            <Input\n              element=\"input\"\n              id=\"name\"\n              type=\"text\"\n              label=\"Your Name\"\n              validators={[VALIDATOR_REQUIRE()]}\n              errorText=\"Please enter a name.\"\n              onInput={inputHandler}\n            />\n          )}\n          {!isLoginMode && (\n            <ImageUpload\n              center\n              id=\"image\"\n              onInput={inputHandler}\n              errorText=\"Please provide an image\"\n            />\n          )}\n          <Input\n            id=\"email\"\n            type=\"Email\"\n            label=\"E-mail\"\n            element=\"input\"\n            validators={[VALIDATOR_EMAIL()]}\n            errorText=\"Please enter a valid email address.\"\n            onInput={inputHandler}\n            value={formState.inputs.email.value}\n            valid={formState.inputs.email.isValid}\n          />\n          <Input\n            id=\"password\"\n            type=\"Password\"\n            label=\"Password\"\n            element=\"input\"\n            validators={[VALIDATOR_MINLENGTH(6)]}\n            errorText=\"Please enter a valid password (min 6 characters).\"\n            onInput={inputHandler}\n            value={formState.inputs.password.value}\n            valid={formState.inputs.password.isValid}\n          />\n          <Button type=\"submit\" disabled={!formState.isValid}>\n            {isLoginMode ? \"LOGIN\" : \"SIGNUP\"}\n          </Button>\n        </form>\n        <Button inverse onClick={switchModeHandler}>\n          SWITCH TO {isLoginMode ? \"SIGNUP\" : \"LOGIN\"}\n        </Button>\n      </Card>\n    </React.Fragment>\n  );\n};\n\nexport default Auth;\n","import React from 'react';\n\nimport './Card.css';\n\nconst Card = props => {\n  return (\n    <div className={`card ${props.className}`} style={props.style}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Card;\n","import \"./ImageUpload.css\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport Button from \"./Button\";\n\nconst ImageUpload = (props) => {\n  const [file, setFile] = useState();\n  const [previewUrl, setPreviewUrl] = useState();\n  const [isValid, setIsValid] = useState(false);\n  const filePickerRef = useRef();\n  useEffect(() => {\n    if (!file) {\n      return;\n    }\n    const fileReader = new FileReader();\n    fileReader.onload = () => {\n      setPreviewUrl(fileReader.result);\n    };\n    fileReader.readAsDataURL(file);\n  }, [file]);\n\n  const pickedHandler = (event) => {\n    let pickedFile;\n    let fileIsValid = isValid;\n    if (event.target.files || event.target.files.length === 1) {\n      pickedFile = event.target.files[0];\n      setFile(pickedFile);\n      setIsValid(true);\n      fileIsValid = true;\n    } else {\n      setIsValid(false);\n      fileIsValid = false;\n    }\n    props.onInput(props.id, pickedFile, fileIsValid);\n  };\n  const pickImageHandler = () => {\n    filePickerRef.current.click();\n  };\n  return (\n    <div className=\"form-control\">\n      <input\n        id={props.id}\n        style={{ display: \"none\" }}\n        type=\"file\"\n        accept=\".jpg,.png,.jpeg\"\n        ref={filePickerRef}\n        onChange={pickedHandler}\n      />\n      <div className={`image-upload ${props.center && \"center\"}`}>\n        <div className=\"image-upload__preview\">\n          {previewUrl ? (\n            <img src={previewUrl} alt=\"preview\" />\n          ) : (\n            <p>Please pick an image</p>\n          )}\n        </div>\n        <Button type=\"button\" onClick={pickImageHandler}>\n          UPLOAD\n        </Button>\n      </div>\n      {!isValid && <p>{props.errorText}</p>}\n    </div>\n  );\n};\n\nexport default ImageUpload;\n"],"sourceRoot":""}